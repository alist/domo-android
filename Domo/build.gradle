buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()

    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

android {
    compileSdkVersion 17
    buildToolsVersion "18.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 17
        versionName '1.0'
        versionCode 1
    }
}


configurations {
    apt
    apt.extendsFrom(compile)
}


dependencies {
    compile 'com.android.support:support-v4:18.0.0'
    compile 'com.google.android.gms:play-services:3.1.+'
    compile group: "com.fasterxml.jackson.core", name: "jackson-core", version: "2.2.2"
    compile group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: "2.2.2"
    compile group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.2.2"
    compile group: "com.j256.ormlite", name: "ormlite-core", version: "4.45"
    compile group: "com.j256.ormlite", name: "ormlite-android", version: "4.45"

    compile('de.keyboardsurfer.android.widget:crouton:1.8.1') {
        exclude module: 'support-v4'
        compile 'com.android.support:support-v4:18.0.0'
    }

    compile project(':libraries:actionbarsherlock')

    compile files('libs/eventbus-2.1.0-beta-1.jar')
    compile files('libs/volley.jar')

    apt group: "org.androidannotations", name: "androidannotations", version: "3.0-SNAPSHOT"
    compile group: "org.androidannotations", name: "androidannotations-api", version: "3.0-SNAPSHOT"
}

def getSourceSetName(variant) {
    return new File(variant.dirName).getName();
}

android.applicationVariants.all { variant ->
    def aptOutputDir = project.file("build/source/apt")
    def aptOutput = new File(aptOutputDir, variant.dirName)
    println "****************************"
    println "variant: ${variant.name}"
    println "manifest:  ${variant.processResources.manifestFile}"
    println "aptOutput:  ${aptOutput}"
    println "****************************"

    android.sourceSets[getSourceSetName(variant)].java.srcDirs += aptOutput.getPath()

    variant.javaCompile.options.compilerArgs += [
            '-processorpath', configurations.apt.getAsPath(),
            '-AandroidManifestFile=' + variant.processResources.manifestFile,
            '-s', aptOutput
    ]

    variant.javaCompile.source = variant.javaCompile.source.filter { p ->
        return !p.getPath().startsWith(aptOutputDir.getPath())
    }

    variant.javaCompile.doFirst {
        aptOutput.mkdirs()
    }
}

//afterEvaluate {
//    android.applicationVariants.each { variant ->
//        def aptOutputDir = file("${project.buildDir}/source/apt")
//
//        variant.javaCompile.doFirst {
//            aptOutputDir.mkdirs()
//            variant.javaCompile.options.compilerArgs += [
//                    '-processorpath', configurations.apt.getAsPath(),
//                    '-AandroidManifestFile=' + variant.processResources.manifestFile,
//                    '-s', aptOutputDir
//            ]
//        }
//    }
//}